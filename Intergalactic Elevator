import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from scipy.spatial import distance
import random
import time
from sklearn.cluster import KMeans
from mpl_toolkits.mplot3d import Axes3D

x_mean_all = 0
x_sd_all = 10

y_mean_all = 0
y_sd_all = 10

random.seed(0)

x_cluster_1a_all = [random.normalvariate(x_mean_all - 5*x_sd_all, x_sd_all) for i in range(100)]
x_cluster_1b_all = [random.normalvariate(x_mean_all - 5*x_sd_all, x_sd_all) for i in range(100)]
x_cluster_1c_all = [random.normalvariate(x_mean_all + 5*x_sd_all, x_sd_all) for i in range(100)]
x_cluster_1d_all = [random.normalvariate(x_mean_all + 5*x_sd_all, x_sd_all) for i in range(100)]

y_cluster_1a_all = [random.normalvariate(y_mean_all - 5*y_sd_all, y_sd_all) for i in range(100)]
y_cluster_1b_all = [random.normalvariate(y_mean_all + 5*y_sd_all, y_sd_all) for i in range(100)]
y_cluster_1c_all = [random.normalvariate(y_mean_all - 5*y_sd_all, y_sd_all) for i in range(100)]
y_cluster_1d_all = [random.normalvariate(y_mean_all + 5*y_sd_all, y_sd_all) for i in range(100)]


x_final = np.concatenate((x_cluster_1a_all,x_cluster_1b_all,x_cluster_1c_all,x_cluster_1d_all))
y_final = np.concatenate((y_cluster_1a_all,y_cluster_1b_all,y_cluster_1c_all,y_cluster_1d_all))
z_final = [random.normalvariate(0, y_sd_all) for i in range(400)]


data_matrix = np.array([x_final,y_final,z_final]).T




def intergalactic_elevator(data_matrix):
  model = KMeans(n_clusters=4, n_init='auto').fit(data_matrix)
  clusters = model.labels_
  fig = plt.figure()
  ax = fig.add_subplot(111, projection='3d')

  colors = ['r', 'g', 'b', 'y']
  
  for i in range(4):
    data_i = data_matrix[np.where(clusters == i)]
    locs_visited = []
    locs_visited.append([0, 0, 0])

    distances = [0]

    while data_i.shape[0] > 1:
      floors_distance = distance.cdist(locs_visited, data_i)[-1]
      closest_distance = np.min(floors_distance)
      closest_loc = data_i[np.argmin(floors_distance)]
      distances.append(closest_distance)
      locs_visited = np.vstack([locs_visited, closest_loc])
      data_i = np.delete(data_i, np.argmin(floors_distance), axis=0)

    print("Distance for Cluster " + str(i) + ": " + str(sum(distances)))
  
    ax.plot(locs_visited[:, 0], locs_visited[:, 1], locs_visited[:, 2], color=colors[i])
    ax.scatter(locs_visited[:, 0], locs_visited[:, 1], locs_visited[:, 2], color=colors[i])
  
  ax.set_xlabel('X Floor')
  ax.set_ylabel('Y Floor')
  ax.set_zlabel('Z Floor')
  plt.show()

intergalactic_elevator(data_matrix)
